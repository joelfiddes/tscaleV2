# this sniippet generates sparse points file for
require(rgeos)
require(sp)
swat_subbasins <- shapefile("/home/joel/data/zisp/sim/Pete2/Watershed/Shapes/subs1.shp")
# run points spasre with basin centroids
# read output from pints sparse
# convert to swat
require(raster)
# this sniippet generates sparse points file for
require(rgeos)
require(sp)
swat_subbasins <- shapefile("/home/joel/data/zisp/sim/Pete2/Watershed/Shapes/subs1.shp")
crs_ll <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
swat_subbasins_ll <-spTransform(swat_subbasins, crs_ll )
sparse_points <- gCentroid(swat_subbasins_ll ,byid=T)
shapefile(sparse_points, "sparse_points.shp")
wd="/home/joel/swatr_demo/sim/"
#shp= shapefile("/home/joel/centroids_wgs.shp") points file used by toposcale
swat_subbasins=shapefile("/home/joel/data/zisp/sim/Pete2/Watershed/Shapes/subs1.shp")# SWAT generated subbasins polygon
files = list.files(wd)
dat = read.csv(paste0(wd, "/",files[1], "/forcing/meteoc1.csv"))
myday=substr(dat$datetime,1,10)
df=c(myday)
eleVec=c()
for (myfile in 1:5) {
#length(files)
lat <-swat_subbasins@coords[myfile,2]  #Get latitude variable
long <- swat_subbasins@coords[myfile,1] #Get longitude variable
dat <- read.csv(paste0(wd, "/",files[myfile], "/forcing/meteoc1.csv"))
ele <- read.csv(paste0(wd, "/",files[myfile], "/listpoints.txt"))$ele
eleVec=c(eleVec, ele)
data<- dat$PSUM #Get precip variable
#outfile=sprintf('%6.4f_%6.4f_PCP.txt',lat,long) #Name of output file; format is 'LATITUDE_LONGITUDE_PCP.txt'
datday=aggregate(data,list(myday), sum)
myvar = formatC(datday$x, width=5, digits=1,flag='0', format='f')
df = cbind(df, myvar)
}
for (myfile in 1:5) {
#length(files)
dat <- read.csv(paste0(wd, "/",files[myfile], "/forcing/meteoc1.csv"))
ele <- read.csv(paste0(wd, "/",files[myfile], "/listpoints.txt"))$ele
eleVec=c(eleVec, ele)
data<- dat$PSUM #Get precip variable
#outfile=sprintf('%6.4f_%6.4f_PCP.txt',lat,long) #Name of output file; format is 'LATITUDE_LONGITUDE_PCP.txt'
datday=aggregate(data,list(myday), sum)
myvar = formatC(datday$x, width=5, digits=1,flag='0', format='f')
df = cbind(df, myvar)
}
# do tha munge!
hdr=rbind(paste0("Title   ", ), paste0("Lati    ",swat_subbasins$Lat) paste0("Long    ",swat_subbasins$Long_))
data[is.na(data)] = -99.0;   #Cleanup in case the data is a NaN
